<?xml version="1.0" encoding="ISO-8859-15"?>
<launch>
  <arg name="voxel_size" default="0.05"/>
  <arg name="max_ray_length_m" default="5"/>
  <arg name="should_use_sim_time" default="false" />
  <param name="use_sim_time" value="$(arg should_use_sim_time)" />

  <!-- Updated sensor frame to match the RealSense camera -->
  <arg name="sensor_frame" default="camera_link"/>

  <!-- If you want to play directly from a rosbag -->
  <arg name="play_bag" default="false"/>
  <arg name="rosbag_rate" default="2.0"/>
  <arg name="bag_file" default="$(find kimera_semantics_ros)/rosbags/kimera_semantics_demo.bag"/>

  <!-- Set to true for 3D reconstruction with semantics -->
  <arg name="metric_semantic_reconstruction" default="true"/>
  <arg name="semantic_label_2_color_csv_filepath" default="$(find kimera_semantics_ros)/cfg/tesse_multiscene_office1_segmentation_mapping.csv"/>

  <!-- Input topics -->
  <arg name="semantic_pointcloud" default="/semantic_pointcloud"/>
  <arg name="left_cam_info_topic" default="/camera/color/camera_info"/>
  <arg name="right_cam_info_topic" default="/camera/aligned_depth_to_color/camera_info"/>
  <arg name="left_cam_topic" default="/camera/color/image_raw"/>
  <arg name="right_cam_topic" default="/camera/aligned_depth_to_color/image_raw"/>
  
  <!-- Remap the segmentation topic to the output from Mask R-CNN -->
  <arg name="left_cam_segmentation_topic" default="/mask_rcnn/segmentation_output"/>
  
  <arg name="left_cam_depth_topic" default="/camera/aligned_depth_to_color/image_raw"/>
  <arg name="use_freespace_pointcloud" default="false"/>
  <arg name="freespace_pointcloud" default="/dev/null"/>

  <!-- Run rosbag if requested with play_bag arg -->
  <node name="player" pkg="rosbag" type="play" output="screen"
    args="--clock --rate $(arg rosbag_rate) $(arg bag_file)" if="$(arg play_bag)">
    <remap from="/tesse/left_cam" to="$(arg left_cam_topic)"/>
    <remap from="/tesse/segmentation" to="$(arg left_cam_segmentation_topic)"/>
    <remap from="/tesse/depth" to="$(arg left_cam_depth_topic)"/>
  </node>

  <!-- Generate input pointcloud with semantic labels for kimera-semantics -->
  <arg name="publish_point_clouds" default="true"/>
  <arg name="run_stereo_dense" default="false"/>
  <group if="$(arg publish_point_clouds)">
    <!-- Launch Nodelet manager -->
    <node pkg="nodelet" type="nodelet" name="nodelet_manager" args="manager" output="screen"/>
    <!-- Run stereo_dense_reconstruction_node if not using the depth image -->
    <arg name="left_cam_stereo_depth_topic" value="/depth_image"/>
    <group if="$(arg run_stereo_dense)">
      <arg name="pointcloud" value="/points2"/>
      <include file="$(find kimera_semantics_ros)/launch/stereo_depth.launch">
        <arg name="left_cam_info_topic" value="$(arg left_cam_info_topic)"/>
        <arg name="right_cam_info_topic" value="$(arg right_cam_info_topic)"/>
        <arg name="left_cam_topic" value="$(arg left_cam_topic)"/>
        <arg name="right_cam_topic" value="$(arg right_cam_topic)"/>
        <arg name="pointcloud" value="$(arg pointcloud)"/>
        <arg name="disparity_image" value="/disparity"/>
        <arg name="depth_image" value="$(arg left_cam_stereo_depth_topic)"/>
        <arg name="convert_disparity_img_to_depth_img" value="true"/>
      </include>
    </group>

    <!-- Convert depth image and RGB image into an RGB pointcloud -->
    <node pkg="nodelet" type="nodelet" name="cloudify"
      args="load depth_image_proc/point_cloud_xyzrgb nodelet_manager -no-bond" output="screen">
      <!-- Input -->
      <remap from="rgb/camera_info" to="$(arg left_cam_info_topic)"/>
      <remap from="rgb/image_rect_color" to="$(arg left_cam_segmentation_topic)" if="$(arg metric_semantic_reconstruction)"/>
      <remap from="rgb/image_rect_color" to="$(arg left_cam_topic)" unless="$(arg metric_semantic_reconstruction)"/>
      <remap from="depth_registered/image_rect" to="$(arg left_cam_stereo_depth_topic)" if="$(arg run_stereo_dense)"/>
      <remap from="depth_registered/image_rect" to="$(arg left_cam_depth_topic)" unless="$(arg run_stereo_dense)"/>
      <!-- Output -->
      <remap from="depth_registered/points" to="$(arg semantic_pointcloud)"/>
      <!-- Params -->
      <param name="queue_size" value="20"/>
    </node>
  </group>

  <arg name="pkg_type" default="kimera_semantics_ros" if="$(arg metric_semantic_reconstruction)"/>
  <arg name="server_type" default="kimera_semantics_node" if="$(arg metric_semantic_reconstruction)"/>
  <arg name="pkg_type" default="voxblox_ros" unless="$(arg metric_semantic_reconstruction)"/>
  <arg name="server_type" default="tsdf_server" unless="$(arg metric_semantic_reconstruction)"/>
  <node name="kimera_semantics_node" pkg="$(arg pkg_type)" type="$(arg server_type)" output="screen"
    args="-alsologtostderr -colorlogtostderr" clear_params="true">
    <!-- Input -->
    <remap from="pointcloud" to="$(arg semantic_pointcloud)"/>

    <!-- Params -->
    <param name="tsdf_voxel_size" value="$(arg voxel_size)" />
    <param name="tsdf_voxels_per_side" value="32" />
    <param name="max_ray_length_m" value="$(arg max_ray_length_m)" />
    <param name="min_time_between_msgs_sec" value="0.2" />
    <param name="voxel_carving_enabled" value="true" />
    <param name="color_mode" value="lambert_color"/>
    <param name="use_const_weight" value="false" />
    <param name="use_freespace_pointcloud" value="$(arg use_freespace_pointcloud)" />
    <remap from="freespace_pointcloud" to="$(arg freespace_pointcloud)"/>

    <param name="sensor_frame" value="$(arg sensor_frame)"/>
    <param name="use_tf_transforms" value="true" />

    <param name="enable_icp" value="false" />
    <param name="icp_iterations" value="10" />

    <param name="verbose" value="true" />

    <param name="method" value="fast" />
    <param name="semantic_color_mode" value="semantic"/>
    <param name="semantic_measurement_probability" value="0.8" />
    <rosparam param="dynamic_semantic_labels">[20]</rosparam>

    <param name="slice_level" value="1.0" />

    <param name="semantic_label_2_color_csv_filepath"
      value="$(arg semantic_label_2_color_csv_filepath)"/>

    <param name="publish_pointclouds" value="false"/>
    <param name="update_mesh_every_n_sec" value="1.0" />
    <param name="mesh_filename" value="$(find kimera_semantics_ros)/mesh_results/$(anon tesse).ply" />
  </node>
</launch>
